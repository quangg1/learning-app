"""
Django settings for dev_core project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dev_core.types.export import KEY_TYPE
from dotenv import load_dotenv



#* Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

#* Auto reload environment variables from fil *.env to advoid error when change the value of the environment variables in the file *.env
load_dotenv(BASE_DIR / '.env', override=True) 

def get_env(key: KEY_TYPE) -> str:
    return os.getenv(key)

#** Variables for environment
DEBUG = True if get_env('DEBUG') == 'True' else False
API_ROUTE = get_env('API_ROUTE')
MY_EMAIL = get_env('MY_EMAIL')
MY_EMAIL_PASSWORD = get_env('MY_EMAIL_PASSWORD')
GOOGLE_ID = get_env('GOOGLE_ID')
GOOGLE_SECRET = get_env('GOOGLE_SECRET')
#** SECURITY WARNING: don't run with debug turned on in production!
SECRET_KEY= get_env('SECRET_KEY')
EMAIL_ADMIN_GROUP=get_env('EMAIL_ADMIN_GROUP')
FRONT_END_URL=get_env('FRONT_END_URL')
if DEBUG:
    FRONT_END_URL = ['http://localhost:3000']
else:
    FRONT_END_URL = FRONT_END_URL.split('|')[1:] #* 1st is localhost, 2nd > is production


#* Quick-start development settings - unsuitable for production
#* See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

#* SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('SECRET_KEY')
#* DB config
DB_URL = get_env('DATABASE_URL') or get_env('DB_URL')

#* Hosts for the app
#* Localhost:
#* ALLOWED_HOSTS = ['*'] #* not * in production
ALLOWED_HOSTS = ['*.vercel.app', '.vercel.app','.onrender.com', '*.onrender.com', "*"] #* not * in production
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = ['*.vercel.app', '.vercel.app','.onrender.com', '*.onrender.com', "*"]
# ALLOWED_HOSTS = ['*.vercel.app', '.vercel.app','.onrender.com', '*.onrender.com'] #* not * in production
HOST_BE_LOCAL = get_env('HOST_BE_LOCAL')
ADMIN_TEMPLATES=get_env('ADMIN_TEMPLATES') == 'True'
if DEBUG == False:
    ADMIN_TEMPLATES=False



#* Application definition
#* ----- Admin app ------------------------
    # "unfold",  #* before django.contrib.admin
    # "unfold.contrib.filters",  #* optional, if special filters are needed
    # "unfold.contrib.forms",  #* optional, if special form elements are needed
    # "unfold.contrib.import_export",  #* optional, if django-import-export package is used
    # "unfold.contrib.guardian",  #* optional, if django-guardian package is used
    # "unfold.contrib.simple_history",  #* optional, if django-simple-history package is used
    # 'import_export',
    # 'django.contrib.admin',

INSTALLED_APPS = []

if ADMIN_TEMPLATES:
    INSTALLED_APPS += [      
        "unfold",  #* before django.contrib.admin
        "unfold.contrib.filters",  #* optional, if special filters are needed
        "unfold.contrib.forms",  #* optional, if special form elements are needed
        "unfold.contrib.import_export",  #* optional, if django-import-export package is used
        "unfold.contrib.guardian",  #* optional, if django-guardian package is used
        "unfold.contrib.simple_history",  #* optional, if django-simple-history package is used
        'import_export',
        'django.contrib.admin',
        'django.contrib.messages',
        'django.contrib.sessions', 
        'django.contrib.staticfiles',
    ]


INSTALLED_APPS += [      
    #*------------------------------------------
    'django.contrib.staticfiles',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    
    #* My app:
    'web_app',
    #* -------Settings for the DRF----------------
    #* JWT app:
    'rest_framework_simplejwt',
    #* API app:
    'rest_framework',
    # 'rest_framework.authtoken',
    'corsheaders',
    #* DJ Social app:
    # 'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'dj_rest_auth.registration',
    #* Social providers:
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.facebook',
]
#* *--------------- Security ----------------------------------------------


MIDDLEWARE = [
    #** Require login middleware should be placed before SecurityMiddleware, because SecurityMiddleware needs to be processed after Require login middleware such that Require login middleware can redirect to the login page.
    'dev_core.security.export.HiddenInfoMiddleware', 
    #** CORS middleware before CommonMiddleware, because CommonMiddleware needs to be processed after CORS middleware such that CORS headers are not removed from the response.
    'corsheaders.middleware.CorsMiddleware', 
]

# if ADMIN_TEMPLATES:
MIDDLEWARE += [
    #* 4 security middleware is pass user: request.user into the view request for API more security
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
]

if ADMIN_TEMPLATES:
    MIDDLEWARE += [ #* turn off to light weight for API
    #** Require login middleware should be placed before SecurityMiddleware, because SecurityMiddleware needs to be processed after Require login middleware such that Require login middleware can redirect to the login page.
        'dev_core.security.export.RequireLoginMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

#* Security settings for model AUTH_USER_MODEL has hash password
from .base.common.auth_model import AUTH_USER_MODEL
#* Site ID for the DJ Social app
from .base.common.site_dev import SITE_ID
#** CORS settings
from .base.common.cors import *
#** Email settings
from .base.common.p3_email import *
#* CSRF settings
from .base.common.csrf import *
#* Session settings
from .base.common.session import *
#* Storage settings
from .base.common.storage_dev import STORAGES

#** Security settings for DRF SecurityMiddleware
#** JWT settings
from .base.drf.auth_jwt import SIMPLE_JWT
#* Rest Framework settings
from .base.drf.auth_drf import * 

#* *--------------- Security ----------------------------------------------
ROOT_URLCONF = 'dev_core.urls'
#* print(BASE_DIR / 'templates')

#* Templates settings

TEMPLATES = []

if ADMIN_TEMPLATES:
    TEMPLATES += [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]


#* WSGI application
WSGI_APPLICATION = 'dev_core.wsgi.application'


#* Database
#* https://docs.djangoproject.com/en/4.2/ref/settings/#*databases
#* Base settings for Configuring the Database:
LIST_OF_DATABASES = [
    {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'user_db.sqlite3',
    },
    {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'web-security-fixed',
        'USER': 'postgres',
        'PASSWORD': 'anhtudev2003',
        'HOST': 'localhost',
        'PORT': '5432',
    }
]
import dj_database_url

DATABASES = {
    'default': LIST_OF_DATABASES[0] if DEBUG else dj_database_url.config(conn_max_age=600)
}

# DATABASES = {
#     'default': LIST_OF_DATABASES[],
#     'user_db': LIST_OF_DATABASES[1],
# }

#* DB Server on Render if not start => deploy fail !!!
DATABASES['default']=dj_database_url.parse(DB_URL)
#* DB Localhost
# DATABASES['default']=LIST_OF_DATABASES[0]




#* Password validation
#* https://docs.djangoproject.com/en/4.2/ref/settings/#*auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#* Internationalization
#* https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'vi'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True



#* Static files (CSS, JavaScript, Images)
#* https://docs.djangoproject.com/en/4.2/howto/static-files/

#** When exporting static files, please turn off the DEBUG mode !!!
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#* Default primary key field type
#* https://docs.djangoproject.com/en/4.2/ref/settings/#*default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#** --------------- Load data fixtures -------------------------------------------

FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'gen/fixtures'),
]


#* *--------------- Unfold settings ----------------------------------------------
#* * from .base.theme_ui import *


UNFOLD = {
    "DASHBOARD_CALLBACK": "web_app.routers.dashboard_callback",
}

#* ----------------- Language settings -------------------------------------------



#* ----------------- Cache settings -------------------------------------------
#* https://docs.djangoproject.com/en/4.2/topics/cache/
#* https://django-redis.readthedocs.io/en/latest/
#* Configure the cache backend to use Redis in your Django settings

